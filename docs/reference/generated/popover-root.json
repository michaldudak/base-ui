{
  "name": "PopoverRoot",
  "description": "Groups all parts of the popover.\nDoesnâ€™t render its own HTML element.",
  "props": {
    "defaultOpen": {
      "type": "boolean | HTMLElement | null"
    },
    "open": {
      "type": "boolean | HTMLElement | null"
    },
    "onOpenChange": {
      "type": "((nextOpen: boolean, event: Event | undefined, reason: Popover.Root.OpenChangeReason | undefined, nextActiveTrigger: HTMLElement | null) => void)",
      "description": "Event handler called when the popover is opened or closed."
    },
    "actionsRef": {
      "type": "RefObject<Popover.Root.Actions>",
      "description": "A ref to imperative actions.\n- `unmount`: When specified, the popover will not be unmounted when closed.\nInstead, the `unmount` function must be called to unmount the popover manually.\nUseful when the popover's animation is controlled by an external library."
    },
    "handle": {
      "type": "PopoverStore<Payload>",
      "description": "A handle to associate the popover with a trigger.\nIf specified, allows external triggers to control the popover's open state."
    },
    "modal": {
      "type": "boolean | 'trap-focus'",
      "default": "false",
      "description": "Determines if the popover enters a modal state when open.\n- `true`: user interaction is limited to the popover: document page scroll is locked, and pointer interactions on outside elements are disabled.\n- `false`: user interaction with the rest of the document is allowed.\n- `'trap-focus'`: focus is trapped inside the popover, but document page scroll is not locked and pointer interactions outside of it remain enabled."
    },
    "onOpenChangeComplete": {
      "type": "((open: boolean) => void)",
      "description": "Event handler called after any animations complete when the popover is opened or closed."
    },
    "children": {
      "type": "ReactNode | Popover.Root.ChildRenderFunction<Payload>"
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
